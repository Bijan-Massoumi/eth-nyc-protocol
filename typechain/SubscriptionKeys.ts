/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PriceChangeStruct = {
  price: BigNumberish;
  rate: BigNumberish;
  startTimestamp: BigNumberish;
  index: BigNumberish;
};

export type PriceChangeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  price: BigNumber;
  rate: BigNumber;
  startTimestamp: BigNumber;
  index: number;
};

export type ProofStruct = { keyContract: string; pcs: PriceChangeStruct[] };

export type ProofStructOutput = [string, PriceChangeStructOutput[]] & {
  keyContract: string;
  pcs: PriceChangeStructOutput[];
};

export interface SubscriptionKeysInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "buyKeys(uint256,(address,(uint256,uint128,uint112,uint16)[])[])": FunctionFragment;
    "getBuyPrice(uint256)": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getKeySubject()": FunctionFragment;
    "getLastTraderPriceIndex(address)": FunctionFragment;
    "getPrice(uint256,uint256)": FunctionFragment;
    "getPriceProof(address)": FunctionFragment;
    "getSellPrice(uint256)": FunctionFragment;
    "getStartHash(address)": FunctionFragment;
    "getSupply()": FunctionFragment;
    "getTaxPrice(uint256)": FunctionFragment;
    "sellKeys(uint256,(address,(uint256,uint128,uint112,uint16)[])[])": FunctionFragment;
    "verifyHashExternal(bytes32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "buyKeys"
      | "getBuyPrice"
      | "getCurrentPrice"
      | "getKeySubject"
      | "getLastTraderPriceIndex"
      | "getPrice"
      | "getPriceProof"
      | "getSellPrice"
      | "getStartHash"
      | "getSupply"
      | "getTaxPrice"
      | "sellKeys"
      | "verifyHashExternal"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyKeys",
    values: [BigNumberish, ProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeySubject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTraderPriceIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceProof",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartHash",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTaxPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellKeys",
    values: [BigNumberish, ProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHashExternal",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeySubject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTraderPriceIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyHashExternal",
    data: BytesLike
  ): Result;

  events: {
    "Trade(address,address,bool,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export interface TradeEventObject {
  trader: string;
  subject: string;
  isBuy: boolean;
  shareAmount: BigNumber;
  ethAmount: BigNumber;
  supply: BigNumber;
}
export type TradeEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber, BigNumber],
  TradeEventObject
>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface SubscriptionKeys extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionKeysInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBuyPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getKeySubject(overrides?: CallOverrides): Promise<[string]>;

    getLastTraderPriceIndex(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceProof(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[ProofStructOutput]>;

    getSellPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStartHash(trader: string, overrides?: CallOverrides): Promise<[string]>;

    getSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTaxPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyHashExternal(
      h: BytesLike,
      trader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  balanceOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyKeys(
    amount: BigNumberish,
    proofs: ProofStruct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBuyPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getKeySubject(overrides?: CallOverrides): Promise<string>;

  getLastTraderPriceIndex(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _supply: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceProof(
    trader: string,
    overrides?: CallOverrides
  ): Promise<ProofStructOutput>;

  getSellPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStartHash(trader: string, overrides?: CallOverrides): Promise<string>;

  getSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getTaxPrice(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellKeys(
    amount: BigNumberish,
    proofs: ProofStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyHashExternal(
    h: BytesLike,
    trader: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getKeySubject(overrides?: CallOverrides): Promise<string>;

    getLastTraderPriceIndex(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceProof(
      trader: string,
      overrides?: CallOverrides
    ): Promise<ProofStructOutput>;

    getSellPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartHash(trader: string, overrides?: CallOverrides): Promise<string>;

    getSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTaxPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyHashExternal(
      h: BytesLike,
      trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Trade(address,address,bool,uint256,uint256,uint256)"(
      trader?: null,
      subject?: null,
      isBuy?: null,
      shareAmount?: null,
      ethAmount?: null,
      supply?: null
    ): TradeEventFilter;
    Trade(
      trader?: null,
      subject?: null,
      isBuy?: null,
      shareAmount?: null,
      ethAmount?: null,
      supply?: null
    ): TradeEventFilter;
  };

  estimateGas: {
    balanceOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getBuyPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getKeySubject(overrides?: CallOverrides): Promise<BigNumber>;

    getLastTraderPriceIndex(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceProof(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStartHash(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getTaxPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyHashExternal(
      h: BytesLike,
      trader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBuyPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKeySubject(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastTraderPriceIndex(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceProof(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStartHash(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaxPrice(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellKeys(
      amount: BigNumberish,
      proofs: ProofStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyHashExternal(
      h: BytesLike,
      trader: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
