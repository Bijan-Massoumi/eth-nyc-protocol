/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SubscriptionKeys,
  SubscriptionKeysInterface,
} from "../SubscriptionKeys";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_subscriptionRate",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_keySubject",
        type: "address",
      },
      {
        internalType: "address",
        name: "_subPoolContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_factoryContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "subject",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shareAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "Trade",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "keyContract",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint128",
                name: "rate",
                type: "uint128",
              },
              {
                internalType: "uint112",
                name: "startTimestamp",
                type: "uint112",
              },
              {
                internalType: "uint16",
                name: "index",
                type: "uint16",
              },
            ],
            internalType: "struct PriceChange[]",
            name: "pcs",
            type: "tuple[]",
          },
        ],
        internalType: "struct Proof[]",
        name: "proofs",
        type: "tuple[]",
      },
    ],
    name: "buyKeys",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getBuyPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getKeySubject",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getLastTraderPriceIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getPriceProof",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "keyContract",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint128",
                name: "rate",
                type: "uint128",
              },
              {
                internalType: "uint112",
                name: "startTimestamp",
                type: "uint112",
              },
              {
                internalType: "uint16",
                name: "index",
                type: "uint16",
              },
            ],
            internalType: "struct PriceChange[]",
            name: "pcs",
            type: "tuple[]",
          },
        ],
        internalType: "struct Proof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getSellPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "getStartHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "getTaxPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "keyContract",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint128",
                name: "rate",
                type: "uint128",
              },
              {
                internalType: "uint112",
                name: "startTimestamp",
                type: "uint112",
              },
              {
                internalType: "uint16",
                name: "index",
                type: "uint16",
              },
            ],
            internalType: "struct PriceChange[]",
            name: "pcs",
            type: "tuple[]",
          },
        ],
        internalType: "struct Proof[]",
        name: "proofs",
        type: "tuple[]",
      },
    ],
    name: "sellKeys",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "h",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "verifyHashExternal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405261a8c0600655612710600d553480156200001d57600080fd5b506040516200239638038062002396833981016040819052620000409162000206565b600980546001600160a01b038681166001600160a01b031992831617909255600a8054868416908316179055600b805492851692909116919091179055600c819055604080516080808201835260008083526001600160801b0389811660208086019182526001600160701b03428116878901908152606080890187815260028054600181018255818a528b5191027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810182905587517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf90910180548651855161ffff908116600160f01b026001600160f01b03928b16600160801b026001600160f01b0319909416958e169590951792909217169290921790558c51968701919091529551909616998401999099525116968101969096529051169184019190915260a08301819052909160c00160408051601f198184030181529190528051602090910120600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0155506200026495505050505050565b80516001600160a01b03811681146200020157600080fd5b919050565b600080600080600060a086880312156200021f57600080fd5b855194506200023160208701620001e9565b93506200024160408701620001e9565b92506200025160608701620001e9565b9150608086015190509295509295909350565b61212280620002746000396000f3fe6080604052600436106100dd5760003560e01c806370037dfc1161007f578063ba730e5311610059578063ba730e5314610242578063ca6e1e8214610262578063eb91d37e1461028a578063f21f3feb1461029f57600080fd5b806370037dfc146101bf57806370a08231146101ec578063af41a10f1461022257600080fd5b806344e5ea7b116100bb57806344e5ea7b1461014a5780635cf4ee911461016a578063697395cc1461018a5780636c9c2faf146101aa57600080fd5b806308d4db14146100e25780633947635f146101155780634156cd531461012a575b600080fd5b3480156100ee57600080fd5b506101026100fd366004611b53565b6102cf565b6040519081526020015b60405180910390f35b610128610123366004611b6c565b6102e3565b005b34801561013657600080fd5b50610102610145366004611c00565b61077f565b34801561015657600080fd5b50610102610165366004611b53565b6107d8565b34801561017657600080fd5b50610102610185366004611c1d565b6107ee565b34801561019657600080fd5b506101286101a5366004611b6c565b61090f565b3480156101b657600080fd5b50600854610102565b3480156101cb57600080fd5b506101df6101da366004611c00565b610ced565b60405161010c9190611c7b565b3480156101f857600080fd5b50610102610207366004611c00565b6001600160a01b031660009081526001602052604090205490565b34801561022e57600080fd5b5061010261023d366004611c00565b610e66565b34801561024e57600080fd5b5061010261025d366004611b53565b610e9c565b34801561026e57600080fd5b506009546040516001600160a01b03909116815260200161010c565b34801561029657600080fd5b50610102610eb5565b3480156102ab57600080fd5b506102bf6102ba366004611ce3565b610ec9565b604051901515815260200161010c565b60006102dd600854836107ee565b92915050565b6000831161032c5760405162461bcd60e51b815260206004820152601160248201527043616e6e6f74206275792030206b65797360781b60448201526064015b60405180910390fd5b600061033a600854856107ee565b9050803410156103855760405162461bcd60e51b8152602060048201526016602482015275496e75736666696369656e74206e667420707269636560501b6044820152606401610323565b600a54600c5460405163a15d7b8560e01b81523360048201819052602482019290925290916000916001600160a01b039091169063a15d7b85906044016040805180830381865afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104029190611d83565b600a54600c546040516317d744db60e21b81526001600160a01b0386811660048301526024820192909252929350600092911690635f5d136c90604401600060405180830381865afa15801561045c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104849190810190611db5565b90506000610499828585602001518a8a610ff7565b600a54600c54604051631b6e3fe960e01b81526001600160a01b0388811660048301526024820192909252306044820152606481018c9052929350600092911690631b6e3fe990608401602060405180830381865afa158015610500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105249190611e8b565b905060006105328734611eba565b855190915083906105439083611ecd565b116105845760405162461bcd60e51b8152602060048201526011602482015270125b9cdd59999a58da595b9d081c1bdbdb607a1b6044820152606401610323565b845160009084906105959084611ecd565b61059f9190611eba565b9050808311156105e55760405162461bcd60e51b8152602060048201526011602482015270125b9cdd59999a58da595b9d081c1bdbdb607a1b6044820152606401610323565b6001600160a01b038716600090815260016020526040812054610609908d90611ecd565b90508b6008546106199190611ecd565b6008556001600160a01b038816600090815260016020526040902054610640908d90611ecd565b6001600160a01b038981166000818152600160205260409081902093909355600a54600c54935163a260fd6b60e01b815260048101929092526024820193909352604481018590526064810184905291169063a260fd6b90608401600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b505050506106d6896110a1565b6009546040516000916001600160a01b03169087908381818185875af1925050503d8060008114610723576040519150601f19603f3d011682016040523d82523d6000602084013e610728565b606091505b50509050806107705760405162461bcd60e51b8152602060048201526014602482015273556e61626c6520746f2073656e642066756e647360601b6044820152606401610323565b50505050505050505050505050565b60008061078b83610e66565b90508060000361079e5750600092915050565b600360016107ab85610e66565b6107b59190611eba565b815481106107c5576107c5611ee0565b9060005260206000200154915050919050565b60006102dd826008546107eb9190611ecd565b60015b6000808315610849576006610804600186611eba565b61080f906002611ef6565b61081a906001611ecd565b85610826600182611eba565b6108309190611ef6565b61083a9190611ef6565b6108449190611f0d565b61084c565b60005b905060008415801561085e5750836001145b6108d357600684610870600188611eba565b61087a9190611ecd565b610885906002611ef6565b610890906001611ecd565b61089a8688611ecd565b866108a660018a611eba565b6108b09190611ecd565b6108ba9190611ef6565b6108c49190611ef6565b6108ce9190611f0d565b6108d6565b60005b905060006108e48383611eba565b9050613e806108fb82670de0b6b3a7640000611ef6565b6109059190611f0d565b9695505050505050565b82600854116109605760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f742073656c6c20746865206c617374206b657900000000000000006044820152606401610323565b600083116109a55760405162461bcd60e51b815260206004820152601260248201527143616e6e6f742073656c6c2030206b65797360701b6044820152606401610323565b60006109be846008546109b89190611eba565b856107ee565b336000818152600160205260409020549192509085811015610a165760405162461bcd60e51b8152602060048201526011602482015270496e73756666696369656e74206b65797360781b6044820152606401610323565b600a54600c5460405163a15d7b8560e01b81526000926001600160a01b03169163a15d7b8591610a5e9187916004016001600160a01b03929092168252602082015260400190565b6040805180830381865afa158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e9190611d83565b600a54600c546040516317d744db60e21b81526001600160a01b0387811660048301526024820192909252929350600092911690635f5d136c90604401600060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b209190810190611db5565b90506000610b35828685602001518b8b610ff7565b90506000610b438a86611eba565b90506000828560000151610b579190611eba565b600a54600c5460405163a260fd6b60e01b81526001600160a01b038b8116600483015260248201929092526044810184905260648101869052929350169063a260fd6b90608401600060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b50505050610bd9886110a1565b336000908152600160205260409020829055600854610bf9908c90611eba565b60085560405160009033908a908381818185875af1925050503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b50506009546040519192506000916001600160a01b039091169086908381818185875af1925050503d8060008114610c97576040519150601f19603f3d011682016040523d82523d6000602084013e610c9c565b606091505b50509050818015610caa5750805b6107705760405162461bcd60e51b8152602060048201526014602482015273556e61626c6520746f2073656e642066756e647360601b6044820152606401610323565b6040805180820190915260008152606060208201526000610d0d83610e66565b600254909150600090610d21908390611eba565b905060008167ffffffffffffffff811115610d3e57610d3e611d13565b604051908082528060200260200182016040528015610d9057816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610d5c5790505b50905060005b82811015610e48576002610daa8286611ecd565b81548110610dba57610dba611ee0565b60009182526020918290206040805160808101825260029390930290910180548352600101546001600160801b03811693830193909352600160801b83046001600160701b031690820152600160f01b90910461ffff1660608201528251839083908110610e2a57610e2a611ee0565b60200260200101819052508080610e4090611f2f565b915050610d96565b50604080518082019091523081526020810191909152949350505050565b6001600160a01b0381166000908152600560205260408120548082036102dd57600254610e9590600190611eba565b9392505050565b60006102dd82600854610eaf9190611eba565b836107ee565b6000610ec460085460016107ee565b905090565b600b546040516337703c3d60e11b81523360048201526000916001600160a01b031690636ee0787a90602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190611f48565b610f825760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642061727469737420636f6e74726163740000000000000000006044820152606401610323565b600380546000918591610f9790600190611eba565b81548110610fa757610fa7611ee0565b90600052602060002001541490508015610fed57600254610fca90600190611eba565b6001600160a01b03841660009081526005602052604090205550600190506102dd565b5060009392505050565b600080805b875181101561107857600088828151811061101957611019611ee0565b60200260200101519050306001600160a01b031681600001516001600160a01b0316036110465750611066565b6000611055828a8a8a8a611528565b90506110618185611ecd565b935050505b8061107081611f2f565b915050610ffc565b50600061108787878787611756565b90506110938183611ecd565b925050505b95945050505050565b6006546007544291906110b49083611eba565b10611408576004546000908190156112205760005b60045481101561121e576004546000906110e590600190611eba565b821461117f57600482815481106110fe576110fe611ee0565b906000526020600020906002020160010160109054906101000a90046001600160701b031660048360016111329190611ecd565b8154811061114257611142611ee0565b906000526020600020906002020160010160109054906101000a90046001600160701b03166111719190611f6a565b6001600160701b03166111c0565b6004828154811061119257611192611ee0565b60009182526020909120600290910201600101546111c090600160801b90046001600160701b031686611eba565b9050600482815481106111d5576111d5611ee0565b906000526020600020906002020160000154816111f29190611ef6565b6111fc9085611ecd565b93506112088184611ecd565b925050808061121690611f2f565b9150506110c9565b505b60008115611237576112328284611f0d565b611239565b845b905060006040518060800160405280838152602001600260016002805490506112629190611eba565b8154811061127257611272611ee0565b60009182526020808320600160029384029091018101546001600160801b0390811686526001600160701b03808d1687850152845461ffff8082166040998a015281850187558688528951919096027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace810191909155938801517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf90940180549789015160608a0151909616600160f01b026001600160f01b0396909216600160801b026001600160f01b03199098169490921693909317959095179290921617909255600380549394509092909161136a91611eba565b8154811061137a5761137a611ee0565b906000526020600020015490506000828260405160200161139c929190611f91565b60408051601f1981840301815291905280516020909101206003805460018101825560009182527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018290559091506113f790600490611b10565b505050600784905550611524915050565b600060405180608001604052808481526020016002600160028054905061142f9190611eba565b8154811061143f5761143f611ee0565b600091825260208083206002928302016001908101546001600160801b0390811686526001600160701b03898116878501526004805461ffff80821660409a8b01529481018255965287517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9690950295860194909455918601517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c909401805495870151606090970151949092166001600160f01b031990951694909417600160801b9590921694909402176001600160f01b0316600160f01b9190921602179055505b5050565b8451604051634156cd5360e01b81526001600160a01b0386811660048301526000928392911690634156cd5390602401602060405180830381865afa158015611575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115999190611e8b565b905060005b838110156116fd5787516001600160a01b03168585838181106115c3576115c3611ee0565b90506020028101906115d59190611fac565b6115e3906020810190611c00565b6001600160a01b0316036116eb57600080611627888589898781811061160b5761160b611ee0565b905060200281019061161d9190611fac565b8d602001516118c4565b8b5160405163f21f3feb60e01b8152600481018390526001600160a01b038d81166024830152939550919350919091169063f21f3feb906044016020604051808303816000875af1158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190611f48565b6116e05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610323565b509250611098915050565b806116f581611f2f565b91505061159e565b5060405162461bcd60e51b815260206004820152602760248201527f4e6f206d61746368696e672050726f6f6620666f756e6420666f72206b6579436044820152661bdb9d1c9858dd60ca1b6064820152608401610323565b6000806117628661077f565b905060005b83811015611861573085858381811061178257611782611ee0565b90506020028101906117949190611fac565b6117a2906020810190611c00565b6001600160a01b03160361184f576000806117fa88858989878181106117ca576117ca611ee0565b90506020028101906117dc9190611fac565b6001600160a01b038d166000908152600160205260409020546118c4565b91509150611808818a611abe565b6118445760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606401610323565b5092506118bc915050565b8061185981611f2f565b915050611767565b5060405162461bcd60e51b815260206004820152602960248201527f4e6f206d61746368696e672050726f6f6620666f756e6420666f72206164647260448201526865737328746869732960b81b6064820152608401610323565b949350505050565b60008036816118d66020870187611fcc565b9092509050806119195760405162461bcd60e51b815260206004820152600e60248201526d4e6f20706173742070726963657360901b6044820152606401610323565b866000611927600184611eba565b90506000805b828111611aad5785858281811061194657611946611ee0565b9050608002018460405160200161195e929190612050565b604051602081830303815290604052805190602001209350600083821061198557426119c3565b8686611992846001611ecd565b8181106119a1576119a1611ee0565b90506080020160400160208101906119b991906120b6565b6001600160701b03165b9050808d11156119d35750611a9b565b60008787848181106119e7576119e7611ee0565b90506080020160400160208101906119ff91906120b6565b6001600160701b031690506000818f118015611a1b5750828f11155b611a255781611a27565b8e5b9050611a8b898986818110611a3e57611a3e611ee0565b611a51926080909102013590508e611ef6565b82858c8c89818110611a6557611a65611ee0565b9050608002016020016020810190611a7d91906120d1565b6001600160801b0316611ad6565b611a959086611ecd565b94505050505b80611aa581611f2f565b91505061192d565b509a91995090975050505050505050565b6000808360036001600380549050610f979190611eba565b6000611ae86301e13380612710611ef6565b611af28585611eba565b611afc8785611ef6565b611b069190611ef6565b6110989190611f0d565b5080546000825560020290600052602060002090810190611b319190611b34565b50565b5b80821115611b4f5760008082556001820155600201611b35565b5090565b600060208284031215611b6557600080fd5b5035919050565b600080600060408486031215611b8157600080fd5b83359250602084013567ffffffffffffffff80821115611ba057600080fd5b818601915086601f830112611bb457600080fd5b813581811115611bc357600080fd5b8760208260051b8501011115611bd857600080fd5b6020830194508093505050509250925092565b6001600160a01b0381168114611b3157600080fd5b600060208284031215611c1257600080fd5b8135610e9581611beb565b60008060408385031215611c3057600080fd5b50508035926020909101359150565b805182526001600160801b0360208201511660208301526001600160701b03604082015116604083015261ffff60608201511660608301525050565b602080825282516001600160a01b03168282015282810151604080840152805160608401819052600092916080919083019082860190855b81811015611cd657611cc6838551611c3f565b9285019291840191600101611cb3565b5090979650505050505050565b60008060408385031215611cf657600080fd5b823591506020830135611d0881611beb565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d4c57611d4c611d13565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d7b57611d7b611d13565b604052919050565b600060408284031215611d9557600080fd5b611d9d611d29565b82518152602083015160208201528091505092915050565b60006020808385031215611dc857600080fd5b825167ffffffffffffffff80821115611de057600080fd5b818501915085601f830112611df457600080fd5b815181811115611e0657611e06611d13565b611e14848260051b01611d52565b818152848101925060069190911b830184019087821115611e3457600080fd5b928401925b81841015611e805760408489031215611e525760008081fd5b611e5a611d29565b8451611e6581611beb565b81528486015186820152835260409093019291840191611e39565b979650505050505050565b600060208284031215611e9d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156102dd576102dd611ea4565b808201808211156102dd576102dd611ea4565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176102dd576102dd611ea4565b600082611f2a57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201611f4157611f41611ea4565b5060010190565b600060208284031215611f5a57600080fd5b81518015158114610e9557600080fd5b6001600160701b03828116828216039080821115611f8a57611f8a611ea4565b5092915050565b60a08101611f9f8285611c3f565b8260808301529392505050565b60008235603e19833603018112611fc257600080fd5b9190910192915050565b6000808335601e19843603018112611fe357600080fd5b83018035915067ffffffffffffffff821115611ffe57600080fd5b6020019150600781901b360382131561201657600080fd5b9250929050565b80356001600160801b038116811461203457600080fd5b919050565b80356001600160701b038116811461203457600080fd5b8235815260a081016001600160801b0361206c6020860161201d565b1660208301526001600160701b0361208660408601612039565b166040830152606084013561ffff81168082146120a257600080fd5b606084015250608090910191909152919050565b6000602082840312156120c857600080fd5b610e9582612039565b6000602082840312156120e357600080fd5b610e958261201d56fea2646970667358221220d46d7aae862a6eb54cb52a1579a4097ae6761593660d648a2bbf41ac4cd3eae464736f6c63430008120033";

type SubscriptionKeysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubscriptionKeysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubscriptionKeys__factory extends ContractFactory {
  constructor(...args: SubscriptionKeysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _subscriptionRate: BigNumberish,
    _keySubject: string,
    _subPoolContract: string,
    _factoryContract: string,
    _groupId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<SubscriptionKeys> {
    return super.deploy(
      _subscriptionRate,
      _keySubject,
      _subPoolContract,
      _factoryContract,
      _groupId,
      overrides || {}
    ) as Promise<SubscriptionKeys>;
  }
  override getDeployTransaction(
    _subscriptionRate: BigNumberish,
    _keySubject: string,
    _subPoolContract: string,
    _factoryContract: string,
    _groupId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _subscriptionRate,
      _keySubject,
      _subPoolContract,
      _factoryContract,
      _groupId,
      overrides || {}
    );
  }
  override attach(address: string): SubscriptionKeys {
    return super.attach(address) as SubscriptionKeys;
  }
  override connect(signer: Signer): SubscriptionKeys__factory {
    return super.connect(signer) as SubscriptionKeys__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionKeysInterface {
    return new utils.Interface(_abi) as SubscriptionKeysInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubscriptionKeys {
    return new Contract(address, _abi, signerOrProvider) as SubscriptionKeys;
  }
}
